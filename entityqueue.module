<?php

/**
 * @file
 * Allows users to collect entities in arbitrarily ordered lists.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function entityqueue_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $module . '/' . $plugin;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function entityqueue_ctools_plugin_type() {
  $plugins['behavior'] = array('process' => 'entityqueue_behavior_plugin_process');
  return $plugins;
}

/**
 * CTools callback; Process the queue behavior plugin.
 */
function entityqueue_behavior_plugin_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
    'queue type' => 'simple',
    'access callback' => FALSE,
    'force enabled' => FALSE,
  );
}

/**
 * Implements hook_permission().
 */
function entityqueue_permission() {
  return array(
    'administer queue types' => array(
      'title' => t('Administer queue types'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function entityqueue_menu() {
  $items = array();

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function entityqueue_entity_info() {
  $return = array(
    'entityqueue' => array(
      'label' => t('Entityqueue'),
      'plural label' => t('Entityqueues'),
      'entity class' => 'EntityQueue',
      'controller class' => 'EntityQueueEntityController',
      'module' => 'entityqueue',
      'base table' => 'entityqueue',
      'load hook' => 'entityqueue_load',
      'uri callback' => 'entityqueue_uri',
      'label callback' => 'entityqueue_label',
      'fieldable' => TRUE,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'queue_id',
        'bundle' => 'type',
        'name' => 'name',
        'label' => 'label',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('queue'),
          'custom settings' => FALSE,
        ),
      ),
      'metadata controller class' => '',
      'access callback' => 'entityqueue_access',
      'export' => array(
        'default hook' => 'entityqueue_default_queues'
      ),
      'admin ui' => array(
        'path' => 'admin/structure/entityqueue',
        'controller class' => 'EntityQueueUIController',
        'file' => 'includes/entityqueue.admin.inc',
      ),
    ),
  );

  // Support the Entity cache module.
//  if (module_exists('entitycache')) {
//    $return['entityqueue']['field cache'] = FALSE;
//    $return['entityqueue']['entity cache'] = TRUE;
//  }

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function entityqueue_entity_info_alter(&$entity_info) {
  // Add every entity type as a entityqueue bundle.
  foreach (entityqueue_type_get_name() as $type => $name) {
    $entity_info['entityqueue']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/entityqueue/types/manage/%',
        'real path' => 'admin/structure/entityqueue/types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer queue types'),
      ),
    );
  }
}

/**
 * Implements hook_entity_property_info().
 */
function entityqueue_entity_property_info() {
  $info = array();
  $properties = &$info['entityqueue']['properties'];

  $properties = array(
    'entityqueue_type' => array(
      'label' => t('queue type'),
      'type' => 'token',
      'description' => t("The type of the queue."),
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer nodes',
      'options queue' => 'entityqueue_type_get_name',
      'required' => TRUE,
      'schema field' => 'type',
    ),
  );

  return $info;
}

/**
 * Access callback for the entity API.
 */
function entityqueue_access($op, $type = NULL, $account = NULL) {
  return TRUE;
}


/**
 * Returns an initialized queue object.
 *
 * @param $type
 *   The machine-readable type of the queue.
 *
 * @return
 *   A queue object with all default fields initialized.
 */
function entityqueue_create($type = 'node') {
  return entity_get_controller('entityqueue')->create(array('type' => $type));
}

/**
 * Saves a queue.
 *
 * @param $queue
 *   The full queue object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function entityqueue_save(EntityQueue $queue) {
  return entity_get_controller('entityqueue')->save($queue);
}

/**
 * Loads a queue by name or by ID.
 *
 * @param $name
 *   The name of a queue.
 *
 * @return
 *   A EntityQueue object.
 */
function entityqueue_load($name = array()) {
  if (empty($name)) {
    return FALSE;
  }

  $queues = entityqueue_load_multiple(array($name));
  return $queues ? reset($queues) : FALSE;
}

/**
 * Loads multiple queues by name or ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $names
 *   An array of queue names.
 * @param $conditions
 *   An array of conditions on the {commerce_product} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal queue loading cache.
 *
 * @return
 *   An array of EntityQueue objects indexed by name.
 *
 * @todo: Add support for $reset in entity_load_multiple_by_name().
 */
function entityqueue_load_multiple($names = array(), $conditions = array(), $reset = FALSE) {
  if (empty($names) && empty($conditions)) {
    return array();
  }

  $queues = entity_load_multiple_by_name('entityqueue', (!empty($names) ? $names : FALSE), $conditions);
  return !empty($queues) ? $queues : array();
}

/**
 * Returns an array of queue types (bundles), keyed by name.
 */
function entityqueue_type_get_name() {
  // @todo: Implement code that handles installing/uninstalling modules that
  // provide entity types.
  $queue_types = array();
  foreach (entity_get_info() as $type => $info) {
    $queue_types[$type] = $info['label'];
  }

  return $queue_types;
}

/**
 * Main class for queue entities.
 */
class EntityQueue extends Entity {
  public $name;
  public $type = 'node';
  public $label;
  public $subqueue_label = '';
  public $module = 'entityqueue';
  
  public function __construct($values = array()) {
    if (!isset($values['type'])) {
      $values['type'] = $this->type;
    }

    parent::__construct($values, 'entityqueue');
  }

  /**
   * Returns whether the queue is locked, thus may not be deleted or renamed.
   *
   * Queues provided in code are automatically treated as locked, as well
   * as any fixed queue.
   */
  public function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }

  /**
   * Returns whether the queue properties are editable, which is TRUE only for
   * parent queues.
   *
   * Only the queue fields are editable for subqueues.
   */
  public function isEditable() {
    return $this->parent_name == NULL;
  }

  /**
   * Returns whether the queue holds more than one subqueue, thus it's fields
   * may not be edited.
   */
  public function hasChildren() {
    return $this->parent_name == NULL && $this->subqueue == 0;
  }
}

/**
 * Implements hook_form_alter().
 */
function entityqueue_form_alter(&$form, &$form_state, $form_id) { }

/**
 * Implements hook_block_view_alter().
 */
function entityqueue_block_view_alter(&$data, $block) {
  // Add contextual links for blocks provided by Views that have a Entityqueue
  // relationship.
  $content = &$data['content'];
  if ($block->module == 'views' && is_array($content) && !empty($content['#contextual_links']['views_ui'])) {
    $view_name = $content['#views_contextual_links_info']['views_ui']['view_name'];
    $view_display_id = $content['#views_contextual_links_info']['views_ui']['view_display_id'];

    // Get the view object from views contextual info or initialize it manually.
    if (!empty($content['#views_contextual_links_info']['views_ui']['view'])) {
      $view = $content['#views_contextual_links_info']['views_ui']['view'];
    }
    else {
      $view = views_get_view($view_name);
    }
    $view->init_display();

    // Get view display relationships.
    $relationships = $view->display[$view_display_id]->handler->get_option('relationships');
    if (!empty($relationships['entityqueue_relationship'])) {
      $referenced_queues = array_keys(array_filter($relationships['entityqueue_relationship']['queues']));

      // Contextual links can handle only one set of links coming from a module,
      // so we'll have to settle for the first referenced queue.
      $queue = entityqueue_load(reset($referenced_queues));

      $link = array('entityqueue' => array('admin/structure/entityqueue/manage', array($queue->name)));
      $content['#contextual_links'] = array_merge($link, $content['#contextual_links']);
      $content['#entityqueue_contextual_links_info'] = array(
        'queue' => $queue,
      );
    }
  }
}

/**
 * Implements hook_views_api().
 */
function entityqueue_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'entityqueue') . '/includes/views',
  );
}

/**
 * Implements hook_theme().
 */
function entityqueue_theme() {
  return array(
    'entityqueue_overview_item' => array(
      'variables' => array('label' => NULL, 'name' => FALSE, 'status' => FALSE),
      'file' => 'includes/entityqueue.admin.inc'
    ),
    'entityqueue_status' => array(
      'variables' => array('status' => NULL, 'html' => TRUE),
      'file' => 'includes/entityqueue.admin.inc'
    ),
  );
}

/**
 * Helper function for getting the name of a entityqueue target field.
 *
 * @param string $entity_type
 *   A Drupal entity type.
 *
 * @return string
 *   The name of the enttityqueue target field for the given entity type.
 */
function _entityqueue_get_target_field_name($entity_type) {
  if (drupal_strlen($entity_type) <= 29) {
    return 'eq_' . $entity_type;
  }
  else {
    // Field names cannot be longer than 32 characters, so have to use a hashing
    // trick in order to get a human-readable field name for long entity types.
    return 'eq_' . substr($entity_type, 0, 20) . '_' . substr(md5($entity_type), 0, 8);
  }
}
