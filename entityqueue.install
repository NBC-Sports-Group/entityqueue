<?php

/**
 * @file
 * Install, update and uninstall functions for the Entityqueue module.
 */

/**
 * Implements hook_schema().
 */
function entityqueue_schema() {
  $schema['entityqueue_queue'] = array(
    'description' => 'Stores global information for each queue.',
    // CTools exportability.
    'export' => array(
      'key' => 'name',
      'identifier' => 'queue',
      'primary key' => 'name',
      'object' => 'EntityQueue',
      'admin_title' => 'label',
      'default hook' => 'entityqueue_default_queues',
      'api' => array(
        'owner' => 'entityqueue',
        'api' => 'entityqueue_default',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
      'create callback' => 'entityqueue_queue_create',
      'load callback' => 'entityqueue_queue_load',
      'load multiple callback' => 'entityqueue_queue_load_multiple',
      'save callback' => 'entityqueue_queue_save',
      'delete callback' => 'entityqueue_queue_delete',
    ),
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The machine-readable name of this queue.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The human-readable name of this queue.',
      ),
      'handler' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The handler plugin that manages this queue.',
      ),
      'target_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The target entity type of this queue.',
      ),
      'settings' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'Serialized settings containing the queue properties that do not warrant a dedicated column.',
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['entityqueue_subqueue'] = array(
    'description' => 'Stores global information for each subqueue.',
    'fields' => array(
      'subqueue_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique subqueue ID.',
      ),
      'queue' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The queue (bundle) of this subqueue.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The machine-readable name of this subqueue.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The human-readable name of this subqueue.',
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The name of the module that created this subqueue.',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The {users}.uid who created this subqueue.',
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'Serialized data containing the subqueue properties that do not warrant a dedicated column.',
      ),
    ),
    'primary key' => array('subqueue_id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
    'indexes' => array(
      'queue' => array('queue'),
      'module' => array('module'),
      'uid' => array('uid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function entityqueue_uninstall() {
  // Remove fields attached to entity queues (bundles).
  // @todo: Fields for exported queues are not deleted. CTools bug? :)
  module_load_include('module', 'entityqueue');
  $queues = entityqueue_queue_load_multiple();
  foreach ($queues as $name => $queue) {
    field_attach_delete_bundle('entitysubqueue', $name);
    field_delete_field(_entityqueue_get_target_field_name($queue->target_type));
  }
//  field_purge_batch(1000);

  // @todo: Remove our variables.
}
