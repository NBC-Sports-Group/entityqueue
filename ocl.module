<?php

/**
 * @file
 * Allows users to collect entities in an arbitrarily ordered list.
 */

function ocl_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_permission().
 */
function ocl_permission() {
  return array(
    'administer list types' => array(
      'title' => t('Administer list types'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ocl_menu() {
  $items = array();

//  $base = array(
//    'access callback' => 'user_access',
//    'access arguments' => array('administer ocl'),
//    'file' => 'includes/ocl.admin.inc',
//  );
//
//  $items['admin/structure/ocl'] = array(
//    'title' => 'Add new list',
//    'page callback' => 'ocl_add_page',
//    'type' => MENU_LOCAL_ACTION,
//  ) + $base;
//  $items['admin/structure/ocl/add'] = array(
//    'title' => 'Add new list',
//    'page callback' => 'ocl_add_page',
//    'type' => MENU_LOCAL_ACTION,
//  ) + $base;
}

/**
 * Implements hook_entity_info().
 */
function ocl_entity_info() {
  $return = array(
    'ocl' => array(
      'label' => t('List'),
      'plural label' => t('Lists'),
      'entity class' => 'OCL',
      'controller class' => 'OclEntityController',
      'module' => 'ocl',
      'base table' => 'ocl',
      'load hook' => 'ocl_load',
      'uri callback' => 'ocl_uri',
      'fieldable' => TRUE,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'list_id',
        'bundle' => 'type',
        'name' => 'name',
        'label' => 'label',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('List'),
          'custom settings' => FALSE,
        ),
      ),
      'metadata controller class' => '',
      'access callback' => 'ocl_access',
      'export' => array(
        'default hook' => 'ocl_default_lists'
      ),
      'admin ui' => array(
        'path' => 'admin/structure/ocl',
        'file' => 'includes/ocl.admin.inc',
        'controller class' => 'OclUIController',
      ),
    ),
  );

  foreach (ocl_type_get_name() as $type => $name) {
    $return['ocl']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/ocl/types/manage/%',
        'real path' => 'admin/structure/ocl/types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer content types'),
      ),
    );
  }

  // Support the Entity cache module.
  if (module_exists('entitycache')) {
    $return['ocl']['field cache'] = FALSE;
    $return['ocl']['entity cache'] = TRUE;
  }

  return $return;
}

/**
 * Implements hook_entity_property_info().
 */
function ocl_entity_property_info() {
  $info = array();
  $properties = &$info['ocl']['properties'];

  $properties = array(
    'ocl_type' => array(
      'label' => t('List type'),
      'type' => 'token',
      'description' => t("The type of the list."),
      'setter callback' => 'entity_property_verbatim_set',
      'setter permission' => 'administer nodes',
      'options list' => 'ocl_type_get_name',
      'required' => TRUE,
      'schema field' => 'type',
    ),
  );

  return $info;
}

/**
 * Access callback for the entity API.
 */
function ocl_access($op, $type = NULL, $account = NULL) {
  return TRUE;
}


/**
 * Returns an initialized list object.
 *
 * @param $type
 *   The machine-readable type of the list.
 *
 * @return
 *   A list object with all default fields initialized.
 */
function ocl_new($type = 'node') {
  return entity_get_controller('ocl')->create(array('type' => $type));
}

/**
 * Saves a list.
 *
 * @param $list
 *   The full list object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function ocl_save($list) {
  return entity_get_controller('ocl')->save($list);
}

/**
 * Loads a list by name or by ID.
 *
 * @param $name
 *   The name of a list.
 *
 * @return
 *   A list entity.
 */
function ocl_load($name = array()) {
  if (empty($name)) {
    return FALSE;
  }

  $lists = ocl_load_multiple(array($name));
  return $lists ? reset($lists) : FALSE;
}

/**
 * Loads multiple lists by name or ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $names
 *   An array of list names.
 * @param $conditions
 *   An array of conditions on the {commerce_product} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal list loading cache.
 *
 * @return
 *   An array of list objects indexed by name.
 *
 * @todo: Add support for $reset in entity_load_multiple_by_name().
 */
function ocl_load_multiple($names = array(), $conditions = array(), $reset = FALSE) {
  if (empty($names) && empty($conditions)) {
    return array();
  }

  $lists = entity_load_multiple_by_name('ocl', (!empty($names) ? $names : FALSE), $conditions);
  return !empty($lists) ? $lists : array();
}

/**
 * Returns an array of list types (bundles), keyed by name.
 */
function ocl_type_get_name() {
  return array(
    'node' => 'Content',
    'user' => 'User',
  );
}



/**
 * Main class for list entities.
 */
class OCL extends Entity {
  public $name;
  public $type = 'node';
  public $label;
  public $sublist_label;
  public $module = 'ocl';
  
  public function __construct($values = array()) {
    if (!isset($values['type'])) {
      $values['type'] = $this->type;
    }

    parent::__construct($values, 'ocl');
  }

  /**
   * Returns whether the list is locked, thus may not be deleted or renamed.
   *
   * Lists provided in code are automatically treated as locked, as well
   * as any fixed list.
   */
  public function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }

  /**
   * Returns wether the list properties are editable, which is TRUE only for
   * parent lists.
   *
   * Only the list fields are editable for sublists.
   */
  public function isEditable() {
    return $this->parent_name == NULL;
  }

  /**
   * Returns wether the list holds more than one sublist, thus it's fields
   * may not be edited.
   */
  public function hasChildren() {
    return $this->parent_name == NULL && $this->sublist == 0;
  }
}

/**
 * Implements hook_ocl_default_lists().
 */
function ocl_ocl_default_lists() {
  $lists = array();

  $lists['nodequeue'] = entity_import('ocl',
    '{
      "name" : "nodequeue",
      "type" : "user",
      "sublist" : "1",
      "label" : "Nodequeue",
      "sublist_label" : "nodequeue",
      "parent_name" : null,
      "min_size" : "0",
      "max_size" : "5",
      "uid" : "1",
      "rdf_mapping" : []
    }');

  $lists['smartqueue'] = entity_import('ocl',
    '{
      "name" : "smartqueue",
      "type" : "node",
      "sublist" : "0",
      "label" : "Smartqueue",
      "sublist_label" : "smartqueue",
      "parent_name" : null,
      "min_size" : "0",
      "max_size" : "0",
      "uid" : "1",
      "rdf_mapping" : []
    }');

  $lists['smartqueue_1'] = entity_import('ocl',
    '{
      "name" : "smartqueue_1",
      "type" : "node",
      "sublist" : "1",
      "label" : "Smartqueue 1",
      "sublist_label" : "smartqueue",
      "parent_name" : "smartqueue",
      "min_size" : "0",
      "max_size" : "0",
      "uid" : "1",
      "rdf_mapping" : []
    }');

  $lists['smartqueue_2'] = entity_import('ocl',
    '{
      "name" : "smartqueue_2",
      "type" : "node",
      "sublist" : "1",
      "label" : "Smartqueue 2",
      "sublist_label" : "smartqueue",
      "parent_name" : "smartqueue",
      "min_size" : "0",
      "max_size" : "0",
      "uid" : "1",
      "rdf_mapping" : []
    }');

  return $lists;
}

function ocl_form_alter(&$form, &$form_state, $form_id) {
//  dsm($form_id);
}

/**
 * Implements hook_theme().
 */
function ocl_theme() {
  return array(
    'ocl_overview_item' => array(
      'variables' => array('label' => NULL, 'name' => FALSE, 'status' => FALSE),
      'file' => 'includes/ocl.admin.inc'
    ),
    'ocl_status' => array(
      'variables' => array('status' => NULL, 'html' => TRUE),
      'file' => 'includes/ocl.admin.inc'
    ),
  );
}
